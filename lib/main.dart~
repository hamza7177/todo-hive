import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:get/get_navigation/src/root/get_material_app.dart';
import 'package:hive/hive.dart';
import 'package:path_provider/path_provider.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:timezone/data/latest.dart' as tz;
import 'package:todo_hive/modules/notes/models/note_model.dart';
import 'package:todo_hive/on_boarding_screen.dart';
import 'package:todo_hive/utils/app_colors.dart';

import 'modules/dashboard/views/dashboard.dart';
import 'modules/notes/models/category_model.dart';
import 'modules/reminders/models/reminder_model.dart';
import 'modules/schedule_planner/models/schedule_model.dart';
import 'modules/todo_list/model/task_model.dart';
import 'modules/voice_notes/models/voice_note_model.dart';

final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
    FlutterLocalNotificationsPlugin();

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  tz.initializeTimeZones();
  final prefs = await SharedPreferences.getInstance();
  final bool isFirstTime = prefs.getBool('isFirstTime') ?? true;
  await _requestNotificationPermission();
  SystemChrome.setPreferredOrientations([
    DeviceOrientation.portraitUp,
    DeviceOrientation.portraitDown,
  ]);
  const AndroidInitializationSettings initializationSettingsAndroid =
      AndroidInitializationSettings(
          '@mipmap/ic_launcher'); // Use your app's launcher icon

  final InitializationSettings initializationSettings = InitializationSettings(
    android: initializationSettingsAndroid,
  );

  await flutterLocalNotificationsPlugin.initialize(initializationSettings);
  var directory = await getApplicationDocumentsDirectory();
  Hive.init(directory.path);
  //Register Adapters
  Hive.registerAdapter(TaskAdapter());
  Hive.registerAdapter(NoteAdapter()); // Register the adapter
  Hive.registerAdapter(ReminderModelAdapter());
  Hive.registerAdapter(CategoryAdapter());
  Hive.registerAdapter(VoiceNoteAdapter());
  Hive.registerAdapter(ScheduleModelAdapter());

  //Open Boxes
  await Hive.openBox<Task>('tasks');
  await Hive.openBox<Task>('completed_tasks');
  await Hive.openBox<Category>('categories');
  await Hive.openBox<Note>('notes');
  await Hive.openBox<ReminderModel>('reminders');
  await Hive.openBox<ReminderModel>('completed_reminders');
  await Hive.openBox<VoiceNote>('voiceNotes');
  await Hive.openBox<ScheduleModel>('schedules');
  runApp(MyApp(
    isFirstTime: isFirstTime,
  ));
}

Future<void> _requestNotificationPermission() async {
  PermissionStatus status = await Permission.notification.request();
  if (status.isDenied || status.isPermanentlyDenied) {
    // Show a dialog or message prompting the user to enable notifications
    print("Notification permission denied.");
  }
}

class MyApp extends StatelessWidget {
  final bool isFirstTime;

  MyApp({super.key, required this.isFirstTime});

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    SystemChrome.setPreferredOrientations([
      DeviceOrientation.portraitUp,
      DeviceOrientation.portraitDown,
    ]);
    return GetMaterialApp(
      builder: (context, child) {
        // Combine MediaQuery customization and EasyLoading initialization
        return MediaQuery(
            data: MediaQuery.of(context).copyWith(textScaleFactor: 1.1),
            child: child!);
      },
      debugShowCheckedModeBanner: false,
      title: 'TODO',
      theme: ThemeData(
        primaryColor: AppColors.primary,
        useMaterial3: true,
      ),
      home: isFirstTime ? const OnBoardingScreen() : Dashboard(),
    );
  }
}
